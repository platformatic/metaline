/* Metaline Grammar */

/* Core rules */
Metaline = Phrase, {";", Phrase};
Phrase = Loop | Property | Input | Value | ObjectPath;

/* Main constructs */
Loop = "$>", (ObjectPath | PropertyAccess);
Input = "$";
Value = Identifier, ":", (Number | String);
ObjectPath = Identifier, {".", Identifier};
PropertyAccess = "#", Identifier;

/* Basic types */
Identifier = Letter, {Letter | Digit};
Number = Integer | Float;
Integer = ["-"], Digit, {Digit};
Float = Integer, ".", Digit, {Digit};
String = {Letter | Digit};

/* Lexical elements */
Letter = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | 
        "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" |
        "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" |
        "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z";
Digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";

/* Comments */
(* This grammar describes the metaline language which supports:
   - Object path traversal (a.b.c)
   - Input reference ($)
   - Input property access (#prop)
   - Looping over input ($>)
   - Value assignment (key:value)
   - Multiple phrases separated by semicolons
*)
